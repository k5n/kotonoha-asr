# cSpell:ignore libwebkit libappindicator librsvg patchelf libclang dtolnay swatinem nreleased RUSTFLAGS rpath esac
name: 'publish'

on:
  workflow_dispatch:
  push:
    branches:
      - release

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target universal-apple-darwin --verbose'
          - platform: 'ubuntu-22.04'
            args: '--verbose'
          - platform: 'windows-latest'
            args: '--verbose'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            xdg-utils \
            file \
            libclang-dev \
            libssl-dev \
            pkg-config

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      # sherpa-rs がダウンロードを行うが、ビルド前に存在しないと macOS のビルドに失敗する。
      # また他のプラットフォームでもビルド前に存在していた方が GitHub Actions でのビルドが安定する。
      - name: Download and extract sherpa-onnx library
        shell: bash
        run: |
          case "${{ matrix.platform }}" in
            "macos-latest")
              PACKAGE="sherpa-onnx-v1.11.5-osx-universal2-shared"
              URL="https://github.com/k2-fsa/sherpa-onnx/releases/download/v1.11.5/$PACKAGE.tar.bz2"
              ;;
            "ubuntu-22.04")
              PACKAGE="sherpa-onnx-v1.11.5-linux-x64-shared"
              URL="https://github.com/k2-fsa/sherpa-onnx/releases/download/v1.11.5/$PACKAGE.tar.bz2"
              ;;
            "windows-latest")
              PACKAGE="sherpa-onnx-v1.11.5-win-x64-shared"
              URL="https://github.com/k2-fsa/sherpa-onnx/releases/download/v1.11.5/$PACKAGE.tar.bz2"
              ;;
          esac

          echo "Downloading from: $URL"
          curl -L "$URL" -o "$PACKAGE.tar.bz2"
          tar -xjf "$PACKAGE.tar.bz2"
          rm "$PACKAGE.tar.bz2"
          mkdir -p src-tauri/target/release
          find "$PACKAGE/lib" -type f -exec cp {} src-tauri/target/release/ \;
          rm -rf $PACKAGE
          ls -la

      - name: install frontend dependencies
        run: npm install

      - name: Set Ubuntu-specific environment variables
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          echo "LD_LIBRARY_PATH=/home/runner/work/kotonoha-asr/kotonoha-asr/src-tauri/target/release" >> $GITHUB_ENV
          echo "RUSTFLAGS=-Clink-arg=-Wl,-rpath,\$ORIGIN" >> $GITHUB_ENV

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SHERPA_BUILD_SHARED_LIBS: 1
          SHERPA_BUILD_DEBUG: 1
        with:
          tagName: v__VERSION__
          releaseName: 'v__VERSION__'
          releaseBody: |
            See the assets to download this version and install.
            - Linux: *_amd64.AppImage
            - Windows: *_x64-setup.exe
            - macOS: *_universal.app.tar.gz
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
